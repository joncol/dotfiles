global !p
def junit(snip):
    if snip.opt("g:ultisnips_java_junit", "") == "3":
        snip += ""
    else:
        snip.rv += "@Test\n    "

def nl(snip):
    if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
        snip += ""
    else:
        snip.rv += " "

def getArgs(group):
    import re
    word = re.compile('[a-zA-Z><.]+ \w+')
    return [i.split(" ") for i in word.findall(group) ]

def camel(word):
    return word[0].upper() + word[1:]

endglobal

snippet fori "for" !b
for (int ${1:i} = 0; $1 < ${2:10}; ++$1)`!p nl(snip)`{
    $0
}
endsnippet

snippet t "test" !b
`!p junit(snip)`public void ${1:Name}() {
    $0
}
endsnippet

snippet spl "StdOut.println" b
StdOut.println($1);$0
endsnippet

snippet spf "StdOut.printf" b
StdOut.printf("$1\n");$0
endsnippet

snippet testfile "jUnit test" b
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.*;
import java.util.Iterator;

/**
 * Tests for ${1}.
 *
 * @author jonas.collberg@gmail.com (Jonas Collberg)
 */
public class Test$1 {
	@BeforeClass
	public static void fixtureSetUp() {
	}

	@Before
	public void setUp() {
	}

	@Test(expected = NullPointerException.class)
	public void ${2:testName}() {
		assertThat(true, is(true));
		assertThat(null, is(nullValue()));
	}
}
endsnippet

snippet /elap(s(e(d)?)?)?/ "get elapsed time" br
Stopwatch stopwatch = new Stopwatch();
StdOut.printf("Elapsed time: %f (s)\n", stopwatch.elapsedTime());
endsnippet

