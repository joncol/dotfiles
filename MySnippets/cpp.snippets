extends c

snippet o "#pragma once"
#pragma once

endsnippet

snippet once "include header once only guard" !
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = name.upper()
else:
	snip.rv = snip.c`}
#define $1

class ${2:`!p snip.rv = snip.basename or "name"`} {
public:
	${2/(\w+).*/$1/}(${3});
	~${2/(\w+).*/$1/}();

private:
	${0}
};

#endif

endsnippet

snippet cpp "include corresponding header file"
#include "`!p snip.rv = snip.basename + ".h"`"

endsnippet

snippet ns "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {

${VISUAL}${0:${VISUAL/(.*)/(?1::)/}}

}
endsnippet

snippet pf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet cl "class .. (class)" !
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2});
	~${1/(\w+).*/$1/}();

private:
	${0}
};
endsnippet

snippet co "std::cout"
std::cout << "$0\n";
endsnippet

snippet cov "std::cout variable"
std::cout << "${1}: " << $1 << "\n";
endsnippet

snippet wrap "Lua wrapper file"
#include <lua/luax.h>

#include <lua.hpp>
#include <lauxlib.h>
#include <lualib.h>

#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>

#include <cassert>
#include <iostream>
#include <memory>

namespace ${1:`!p snip.rv = snip.basename.replace("wrap_", "", 1) or "name"`} {

namespace fs = boost::filesystem;

int w_${2}(lua_State* l);

static const luaL_Reg functions[] =
{
	{ "$2", w_$2 },
	{ nullptr, nullptr }
};

extern "C" int luaopen_app_$1(lua_State* l)
{
	luaL_register(l, "app.$1", functions); // Lua 5.1
	// luaL_newlib(l, functions); // Lua 5.2
	return 1;
}

int w_$2(lua_State* l)
{
	return 0;
}

}
endsnippet
