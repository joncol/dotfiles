# Local Variables:
# mode: makefile
# indent-tabs-mode: nil
# End:
# vim: set ft=make :

set dotenv-load := true

# Automatically compile when source files change.
ghcid:
  ghcid --command='cabal repl kontrakcja --repl-options=-Wwarn'

# Automatically compile and rerun tests when source files change.
ghcid-test:
  scripts/generate-cabal-file-for-testing.sh && cd scripts/kontrakcja/ && \
    ghcid --command='cabal repl kontrakcja-test --repl-options=-Wwarn' --test 'Main.main' -W

# Start `supervisord` and all services.
start-all:
  #!/usr/bin/env bash
  if [ ! -e supervisor/supervisor.sock ]
  then
    supervisord
  fi
  supervisorctl start all

stop-all:
  #!/usr/bin/env bash
  supervisorctl stop all

# Watch programs for changes and automatically restart the corresponding
# `supervisorctl` service when the executable file changes.
watch:
  #!/usr/bin/env bash
  if [ ! -e supervisor/supervisor.sock ]
  then
    supervisord
  fi

  supervisorctl start services:

  inotifywait -qrme modify ./dist-newstyle/build/x86_64-linux/ghc-8.10.4/kontrakcja-1.0/x |
  while read path event file; do
    if [[ ! $file == *.tmp ]] && [[ ! $file == *.dyn_hi ]] && [[ ! $file == *.hi ]]; then
      service_name=$(grep -B1 -im1 "command.*$file" supervisord.conf | head -n1 | sed -s 's/\[program:\(.*\)\]/programs:\1/')
      if [ -n "$service_name" ]; then
        echo "$(date +%H:%M:%S) - detected change in $service_name"
        if supervisorctl status $service_name >/dev/null; then
          echo "$(date +%H:%M:%S) - stopping $file..."
          supervisorctl stop $service_name
          while supervisorctl status $service_name >/dev/null; do sleep 1; done
        fi
        echo "$(date +%H:%M:%S) - Starting $file..."
        supervisorctl start $service_name
      fi
    fi
  done

# Watch `kontrakcja-server` for changes and automatically restart the
# `supervisorctl` service when the executable file changes.
watch-server:
  #!/usr/bin/env bash
  inotifywait -qrme modify ./dist-newstyle/build/x86_64-linux/ghc-8.10.4/kontrakcja-1.0/x/kontrakcja-server/build/kontrakcja-server |
  while read path event file; do
    if [[ ! $file == *.tmp ]] && [[ ! $file == *.dyn_hi ]] && [[ ! $file == *.hi ]]; then
      if supervisorctl status programs:$file >/dev/null; then
        echo "$(date +%H:%M:%S) - stopping $file..."
        supervisorctl stop programs:$file
        while supervisorctl status programs:$file >/dev/null; do sleep 1; done
      fi
      echo "$(date +%H:%M:%S) - Starting $file..."
      supervisorctl start programs:$file
    fi
  done

# Watch `api-docs` for changes and automatically rebuild the documentation when
# some file changes.
watch-docs:
  #!/usr/bin/env bash
  inotifywait -qrme close_write ./api-docs/documentation |
  while read path event file; do
    if [[ ! $file == *.tmp ]]; then
      echo "$(date +%H:%M:%S) - Detected change in \"$file\". Rebuilding documentation..."
      openapi2slate api-docs/documentation/scrive_api.yaml --search-filter > \
        api-docs/index/index.html.md
    fi
  done

# Watch /tmp for emails sent by `kontrakcja`.
watch-mail:
  #!/usr/bin/env bash
  inotifywait -qme close_write /tmp |
  while read path event file; do
    if [[ $file == *.eml ]]; then
      url=$(grep -m1 "Go to document" $path$file | cut -d ' ' -f 5)
      echo "$(date +%H:%M:%S) - Mail sent by kontrakcja, signing link: $url"
    fi
  done

# Create Git hook to automatically prefix commit messages with the JIRA ticket
# number.
git-hooks:
  #!/usr/bin/env bash
  cat <<"EOF" > .git/hooks/prepare-commit-msg
  #!/usr/bin/env bash

  commit_msg_file=$1

  branch=$(git rev-parse --abbrev-ref HEAD)

  if [[ "${branch}" =~ ^.*core-?([0-9]+).* ]]; then
      prefix="CORE-${BASH_REMATCH[1]}"
  elif [[ "${branch}" =~ ^.*no-?issue.* ]]; then
      prefix="NO-ISSUE"
  fi

  current_msg=$(head -n 1 "${commit_msg_file}")

  if [ -n "$prefix" ] && (echo "${current_msg}" | grep -vi "^\[${prefix}\]") && \
      (echo "${current_msg}" | grep -vi "fixup\|squash")
  then
      sed -i.bak -e "1s/^/[$prefix] \n/" "${commit_msg_file}"
  fi
  EOF
  chmod +x .git/hooks/prepare-commit-msg
