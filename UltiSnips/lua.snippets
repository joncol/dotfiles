snippet !fun(ction)?! "New function" !br
function ${1:name}(${2})
	${VISUAL}
end

endsnippet

snippet forp "pair for loop" b
for ${1:k}, ${2:v} in pairs(${3:table_name}) do
	$0
end
endsnippet

snippet fori "ipair for foop" !b
for ${1:k}, ${2:v} in ipairs(${3:table_name}) do
	$0
end
endsnippet

snippet for "numeric for loop" !b
for ${1:i} = ${2:first}, ${3:last}${4/^..*/(?0:, :)/}${4:step} do
	$0
end
endsnippet

snippet comp "ECS component" !b
local class = require("common/class")

local ${1:`!p snip.rv = snip.basename.replace("_component", "", 1)`}_component = class()

function $1_component:_init()
	self.component_id = "$1"
end

return $1_component
endsnippet

snippet /sys(tem?)/ "ECS system" !br
local class = require("common/class")

local ${1:`!p snip.rv = snip.basename.replace("_system", "", 1)`}_system = class()

function $1_system:_init(engine)
	self.system_id = "$1"
	self.engine = engine
end

function $1_system:required_components()
	return {"${2}", "${3}"}
end

function $1_system:update(dt)
	local nodes = self.engine.system_nodes[self.system_id]
	if nodes then
		for entity_id, node in pairs(nodes) do
			self.$2, self.$3 = unpack(node)
			${0}
		end
	end
end

return $1_system
endsnippet

snippet ev "ECS event handler" !b
function ${1:`!p snip.rv = snip.basename`}:event(entity_id, name, ...)
	${0}
end

endsnippet

snippet desc "Busted spec description" !b
describe("${1:`!p snip.rv = snip.basename.replace("_spec", "", 1)`}", function()

	it("${2}", function()
		$0
	end)

end)

endsnippet

snippet it "Busted spec" !b
it("${1}", function()
	$0
end)

endsnippet

snippet be "Busted before_each" !b
before_each(function()
	$0
end)
endsnippet

snippet ae "Busted after_each" !b
after_each(function()
	$0
end)
endsnippet

